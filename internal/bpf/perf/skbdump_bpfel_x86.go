// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package perf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type SkbdumpSkbMeta struct {
	IsIngress      bool
	_              [7]byte
	Address        uint64
	TimeNs         uint64
	Len            uint32
	PktType        uint32
	Mark           uint32
	QueueMapping   uint32
	Protocol       uint32
	VlanPresent    uint32
	VlanTci        uint32
	VlanProto      uint32
	Priority       uint32
	IngressIfindex uint32
	Ifindex        uint32
	TcIndex        uint32
	Cb             [5]uint32
	_              [4]byte
}

// LoadSkbdump returns the embedded CollectionSpec for Skbdump.
func LoadSkbdump() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SkbdumpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Skbdump: %w", err)
	}

	return spec, err
}

// LoadSkbdumpObjects loads Skbdump and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*SkbdumpObjects
//	*SkbdumpPrograms
//	*SkbdumpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadSkbdumpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadSkbdump()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// SkbdumpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SkbdumpSpecs struct {
	SkbdumpProgramSpecs
	SkbdumpMapSpecs
}

// SkbdumpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SkbdumpProgramSpecs struct {
	OnEgress  *ebpf.ProgramSpec `ebpf:"on_egress"`
	OnIngress *ebpf.ProgramSpec `ebpf:"on_ingress"`
}

// SkbdumpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SkbdumpMapSpecs struct {
	PerfOutput *ebpf.MapSpec `ebpf:"perf_output"`
}

// SkbdumpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadSkbdumpObjects or ebpf.CollectionSpec.LoadAndAssign.
type SkbdumpObjects struct {
	SkbdumpPrograms
	SkbdumpMaps
}

func (o *SkbdumpObjects) Close() error {
	return _SkbdumpClose(
		&o.SkbdumpPrograms,
		&o.SkbdumpMaps,
	)
}

// SkbdumpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadSkbdumpObjects or ebpf.CollectionSpec.LoadAndAssign.
type SkbdumpMaps struct {
	PerfOutput *ebpf.Map `ebpf:"perf_output"`
}

func (m *SkbdumpMaps) Close() error {
	return _SkbdumpClose(
		m.PerfOutput,
	)
}

// SkbdumpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadSkbdumpObjects or ebpf.CollectionSpec.LoadAndAssign.
type SkbdumpPrograms struct {
	OnEgress  *ebpf.Program `ebpf:"on_egress"`
	OnIngress *ebpf.Program `ebpf:"on_ingress"`
}

func (p *SkbdumpPrograms) Close() error {
	return _SkbdumpClose(
		p.OnEgress,
		p.OnIngress,
	)
}

func _SkbdumpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed skbdump_bpfel_x86.o
var _SkbdumpBytes []byte

// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type BpfSkbdump struct {
	Meta struct {
		At       uint64
		Skb      uint64
		TimeNs   uint64
		Data     uint64
		Len      uint32
		Protocol uint32
		PktType  uint16
		L2       uint16
		Mark     uint32
		Ifindex  uint32
		Cb       [5]uint32
	}
	Payload [1500]uint8
	_       [4]byte
}

// LoadBpf returns the embedded CollectionSpec for Bpf.
func LoadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Bpf: %w", err)
	}

	return spec, err
}

// LoadBpfObjects loads Bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfObjects
//	*BpfPrograms
//	*BpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSpecs struct {
	BpfProgramSpecs
	BpfMapSpecs
}

// BpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgramSpecs struct {
	KprobeKfreeSkbmem *ebpf.ProgramSpec `ebpf:"kprobe_kfree_skbmem"`
	OnEgress          *ebpf.ProgramSpec `ebpf:"on_egress"`
	OnIngress         *ebpf.ProgramSpec `ebpf:"on_ingress"`
	OnKprobe1         *ebpf.ProgramSpec `ebpf:"on_kprobe1"`
	OnKprobe2         *ebpf.ProgramSpec `ebpf:"on_kprobe2"`
	OnKprobe3         *ebpf.ProgramSpec `ebpf:"on_kprobe3"`
	OnKprobe4         *ebpf.ProgramSpec `ebpf:"on_kprobe4"`
	OnKprobe5         *ebpf.ProgramSpec `ebpf:"on_kprobe5"`
	OnKprobeTid       *ebpf.ProgramSpec `ebpf:"on_kprobe_tid"`
	OnKretprobe       *ebpf.ProgramSpec `ebpf:"on_kretprobe"`
	OnKretprobeTid    *ebpf.ProgramSpec `ebpf:"on_kretprobe_tid"`
}

// BpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfMapSpecs struct {
	BpfStack     *ebpf.MapSpec `ebpf:"bpf_stack"`
	PerfOutput   *ebpf.MapSpec `ebpf:"perf_output"`
	SkbAddresses *ebpf.MapSpec `ebpf:"skb_addresses"`
	Sp2ip        *ebpf.MapSpec `ebpf:"sp2ip"`
	Tid2skb      *ebpf.MapSpec `ebpf:"tid2skb"`
	Tid2sp       *ebpf.MapSpec `ebpf:"tid2sp"`
}

// BpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfObjects struct {
	BpfPrograms
	BpfMaps
}

func (o *BpfObjects) Close() error {
	return _BpfClose(
		&o.BpfPrograms,
		&o.BpfMaps,
	)
}

// BpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfMaps struct {
	BpfStack     *ebpf.Map `ebpf:"bpf_stack"`
	PerfOutput   *ebpf.Map `ebpf:"perf_output"`
	SkbAddresses *ebpf.Map `ebpf:"skb_addresses"`
	Sp2ip        *ebpf.Map `ebpf:"sp2ip"`
	Tid2skb      *ebpf.Map `ebpf:"tid2skb"`
	Tid2sp       *ebpf.Map `ebpf:"tid2sp"`
}

func (m *BpfMaps) Close() error {
	return _BpfClose(
		m.BpfStack,
		m.PerfOutput,
		m.SkbAddresses,
		m.Sp2ip,
		m.Tid2skb,
		m.Tid2sp,
	)
}

// BpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPrograms struct {
	KprobeKfreeSkbmem *ebpf.Program `ebpf:"kprobe_kfree_skbmem"`
	OnEgress          *ebpf.Program `ebpf:"on_egress"`
	OnIngress         *ebpf.Program `ebpf:"on_ingress"`
	OnKprobe1         *ebpf.Program `ebpf:"on_kprobe1"`
	OnKprobe2         *ebpf.Program `ebpf:"on_kprobe2"`
	OnKprobe3         *ebpf.Program `ebpf:"on_kprobe3"`
	OnKprobe4         *ebpf.Program `ebpf:"on_kprobe4"`
	OnKprobe5         *ebpf.Program `ebpf:"on_kprobe5"`
	OnKprobeTid       *ebpf.Program `ebpf:"on_kprobe_tid"`
	OnKretprobe       *ebpf.Program `ebpf:"on_kretprobe"`
	OnKretprobeTid    *ebpf.Program `ebpf:"on_kretprobe_tid"`
}

func (p *BpfPrograms) Close() error {
	return _BpfClose(
		p.KprobeKfreeSkbmem,
		p.OnEgress,
		p.OnIngress,
		p.OnKprobe1,
		p.OnKprobe2,
		p.OnKprobe3,
		p.OnKprobe4,
		p.OnKprobe5,
		p.OnKprobeTid,
		p.OnKretprobe,
		p.OnKretprobeTid,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel_x86.o
var _BpfBytes []byte
